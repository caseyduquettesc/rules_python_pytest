name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  # Cancel previous actions from the same PR: https://stackoverflow.com/a/72408109
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    uses: bazel-contrib/.github/.github/workflows/bazel.yaml@29e53247c6366e30acbedfc767f58f79fc05836c
    with:
      folders: |
        [
          ".",
          "e2e/smoke"
        ]
      exclude: |
        [
          {"folder": ".", "bzlmodEnabled": false},
          {"bazelversion": "5.4.0", "bzlmodEnabled": true},
          {"bazelversion": "5.4.0", "os": "macos-latest"},
          {"bazelversion": "6.3.0", "os": "macos-latest"},
        ]
      exclude_windows: true
  matrix-prep-os:
    # Prepares the 'os' axis of the test matrix, to reduce costs since GitHub hosted runners cost more on some platforms.
    # https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions#included-storage-and-minutes
    runs-on: ubuntu-20.04
    steps:
      - id: linux
        run: echo "os=ubuntu-20.04" >> $GITHUB_OUTPUT
    outputs:
      # Will look like ["ubuntu-latest", "windows-latest", "macos-latest"]
      os: ${{ toJSON(steps.*.outputs.os) }}

  matrix-prep-bazelversion:
    # Prepares the 'bazelversion' axis of the test matrix
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - id: bazel_from_bazelversion
        run: echo "bazelversion=$(head -n 1 .bazelversion)" >> $GITHUB_OUTPUT
    outputs:
      # Will look like ["<version from .bazelversion>", "5.3.2"]
      bazelversions: ${{ toJSON(steps.*.outputs.bazelversion) }}

  test2:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    needs:
      - matrix-prep-bazelversion
      - matrix-prep-os

    # Run bazel test in each workspace with each version of Bazel supported
    strategy:
      fail-fast: true
      matrix:
        os: ${{ fromJSON(needs.matrix-prep-os.outputs.os) }}
        bazelversion: ${{ fromJSON(needs.matrix-prep-bazelversion.outputs.bazelversions) }}
        folder: [e2e/smoke]
        bzlmodEnabled: [true]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Cache build artifacts so that the next ci build is incremental.
      # Because github action caches cannot be updated after a build, we need to
      # store the contents of each build in a unique cache key, then fall back to loading
      # it on the next ci run. We use hashFiles(...) in the key and restore-keys- with
      # the prefix to load the most recent cache for the branch on a cache miss. You
      # should customize the contents of hashFiles to capture any bazel input sources,
      # although this doesn't need to be perfect. If none of the input sources change
      # then a cache hit will load an existing cache and bazel won't have to do any work.
      # In the case of a cache miss, you want the fallback cache to contain most of the
      # previously built artifacts to minimize build time. The more precise you are with
      # hashFiles sources the less work bazel will have to do.
      # We do not cache downloaded external artifacts as these are generally
      # faster to download again than to fetch them from the GitHub actions
      # cache.
      - name: Mount bazel caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/bazel
          key: bazel-cache-${{ hashFiles('**/BUILD.bazel', '**/*.bzl', 'WORKSPACE') }}
          restore-keys: bazel-cache-

      - name: Configure Bazel version
        working-directory: ${{ matrix.folder }}
        run: echo "${{ matrix.bazelversion }}" > .bazelversion

      - name: Check for test.sh
        # Checks for the existence of test.sh in the folder. Downstream steps can use
        # steps.has_test_sh.outputs.files_exists as a conditional.
        id: has_test_sh
        uses: andstor/file-existence-action@v2
        with:
          files: "${{ matrix.folder }}/test.sh"

      - name: Set bzlmod flag
        # Store the --enable_bzlmod flag that we add to the test command below
        # only when we're running bzlmod in our test matrix.
        id: set_bzlmod_flag
        if: matrix.bzlmodEnabled
        run: echo "bzlmod_flag=--enable_bzlmod" >> $GITHUB_OUTPUT

      - name: bazel test //...
        env:
          # Bazelisk will download bazel to here.
          XDG_CACHE_HOME: ~/.cache/bazel-repo
        working-directory: ${{ matrix.folder }}
        run: bazel --bazelrc=${{ github.workspace }}/.github/workflows/ci.bazelrc --bazelrc=.bazelrc test ${{ steps.set_bzlmod_flag.outputs.bzlmod_flag }} //...

      - name: ./test.sh
        # Run if there is a test.sh file in the folder
        # Don't run integration tests on Windows since they are bash scripts and Windows runs Powershell
        if: steps.has_test_sh.outputs.files_exists == 'true' && ! startsWith(matrix.os, 'windows')
        working-directory: ${{ matrix.folder }}
        shell: bash
        # Run the script potentially setting BZLMOD_FLAG=--enable_bzlmod. All test.sh
        # scripts that run bazel directly should make use of this variable.
        run: BZLMOD_FLAG=${{ steps.set_bzlmod_flag.outputs.bzlmod_flag }} ./test.sh
